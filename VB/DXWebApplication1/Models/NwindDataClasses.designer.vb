'TODO: INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning disable 1591
'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34014
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------


Imports Microsoft.VisualBasic
	Imports System.Data.Linq
	Imports System.Data.Linq.Mapping
	Imports System.Data
	Imports System.Collections.Generic
	Imports System.Reflection
	Imports System.Linq
	Imports System.Linq.Expressions
	Imports System.ComponentModel
	Imports System
Namespace DXWebApplication1.Models


	<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Northwind")> _
	Partial Public Class NwindDataClassesDataContext
		Inherits System.Data.Linq.DataContext

		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub InsertProduct(ByVal instance As Product)
	End Sub
	Partial Private Sub UpdateProduct(ByVal instance As Product)
	End Sub
	Partial Private Sub DeleteProduct(ByVal instance As Product)
	End Sub
	#End Region

		Public Sub New()
			MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("NorthwindConnectionString").ConnectionString, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public ReadOnly Property Products() As System.Data.Linq.Table(Of Product)
			Get
				Return Me.GetTable(Of Product)()
			End Get
		End Property
	End Class

	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Products")> _
	Partial Public Class Product
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _ProductID As Integer

		Private _ProductName As String

		Private _SupplierID As System.Nullable(Of Integer)

		Private _CategoryID As System.Nullable(Of Integer)

		Private _QuantityPerUnit As String

		Private _UnitPrice As System.Nullable(Of Decimal)

		Private _UnitsInStock As System.Nullable(Of Short)

		Private _UnitsOnOrder As System.Nullable(Of Short)

		Private _ReorderLevel As System.Nullable(Of Short)

		Private _Discontinued As Boolean

		Private _DisplayIndex As System.Nullable(Of Integer)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnProductIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnProductIDChanged()
	End Sub
	Partial Private Sub OnProductNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnProductNameChanged()
	End Sub
	Partial Private Sub OnSupplierIDChanging(ByVal value As System.Nullable(Of Integer))
	End Sub
	Partial Private Sub OnSupplierIDChanged()
	End Sub
	Partial Private Sub OnCategoryIDChanging(ByVal value As System.Nullable(Of Integer))
	End Sub
	Partial Private Sub OnCategoryIDChanged()
	End Sub
	Partial Private Sub OnQuantityPerUnitChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnQuantityPerUnitChanged()
	End Sub
	Partial Private Sub OnUnitPriceChanging(ByVal value As System.Nullable(Of Decimal))
	End Sub
	Partial Private Sub OnUnitPriceChanged()
	End Sub
	Partial Private Sub OnUnitsInStockChanging(ByVal value As System.Nullable(Of Short))
	End Sub
	Partial Private Sub OnUnitsInStockChanged()
	End Sub
	Partial Private Sub OnUnitsOnOrderChanging(ByVal value As System.Nullable(Of Short))
	End Sub
	Partial Private Sub OnUnitsOnOrderChanged()
	End Sub
	Partial Private Sub OnReorderLevelChanging(ByVal value As System.Nullable(Of Short))
	End Sub
	Partial Private Sub OnReorderLevelChanged()
	End Sub
	Partial Private Sub OnDiscontinuedChanging(ByVal value As Boolean)
	End Sub
	Partial Private Sub OnDiscontinuedChanged()
	End Sub
	Partial Private Sub OnDisplayIndexChanging(ByVal value As System.Nullable(Of Integer))
	End Sub
	Partial Private Sub OnDisplayIndexChanged()
	End Sub
	#End Region

		Public Sub New()
			OnCreated()
		End Sub

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
		Public Property ProductID() As Integer
			Get
				Return Me._ProductID
			End Get
			Set(ByVal value As Integer)
				If (Me._ProductID <> value) Then
					Me.OnProductIDChanging(value)
					Me.SendPropertyChanging()
					Me._ProductID = value
					Me.SendPropertyChanged("ProductID")
					Me.OnProductIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)> _
		Public Property ProductName() As String
			Get
				Return Me._ProductName
			End Get
			Set(ByVal value As String)
				If (Me._ProductName <> value) Then
					Me.OnProductNameChanging(value)
					Me.SendPropertyChanging()
					Me._ProductName = value
					Me.SendPropertyChanged("ProductName")
					Me.OnProductNameChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierID", DbType:="Int")> _
		Public Property SupplierID() As System.Nullable(Of Integer)
			Get
				Return Me._SupplierID
			End Get
			Set(ByVal value As System.Nullable(Of Integer))
				If (Not Me._SupplierID.Equals(value)) Then
					Me.OnSupplierIDChanging(value)
					Me.SendPropertyChanging()
					Me._SupplierID = value
					Me.SendPropertyChanged("SupplierID")
					Me.OnSupplierIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryID", DbType:="Int")> _
		Public Property CategoryID() As System.Nullable(Of Integer)
			Get
				Return Me._CategoryID
			End Get
			Set(ByVal value As System.Nullable(Of Integer))
				If (Not Me._CategoryID.Equals(value)) Then
					Me.OnCategoryIDChanging(value)
					Me.SendPropertyChanging()
					Me._CategoryID = value
					Me.SendPropertyChanged("CategoryID")
					Me.OnCategoryIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuantityPerUnit", DbType:="NVarChar(20)")> _
		Public Property QuantityPerUnit() As String
			Get
				Return Me._QuantityPerUnit
			End Get
			Set(ByVal value As String)
				If (Me._QuantityPerUnit <> value) Then
					Me.OnQuantityPerUnitChanging(value)
					Me.SendPropertyChanging()
					Me._QuantityPerUnit = value
					Me.SendPropertyChanged("QuantityPerUnit")
					Me.OnQuantityPerUnitChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitPrice", DbType:="Money")> _
		Public Property UnitPrice() As System.Nullable(Of Decimal)
			Get
				Return Me._UnitPrice
			End Get
			Set(ByVal value As System.Nullable(Of Decimal))
				If (Not Me._UnitPrice.Equals(value)) Then
					Me.OnUnitPriceChanging(value)
					Me.SendPropertyChanging()
					Me._UnitPrice = value
					Me.SendPropertyChanged("UnitPrice")
					Me.OnUnitPriceChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsInStock", DbType:="SmallInt")> _
		Public Property UnitsInStock() As System.Nullable(Of Short)
			Get
				Return Me._UnitsInStock
			End Get
			Set(ByVal value As System.Nullable(Of Short))
				If (Not Me._UnitsInStock.Equals(value)) Then
					Me.OnUnitsInStockChanging(value)
					Me.SendPropertyChanging()
					Me._UnitsInStock = value
					Me.SendPropertyChanged("UnitsInStock")
					Me.OnUnitsInStockChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsOnOrder", DbType:="SmallInt")> _
		Public Property UnitsOnOrder() As System.Nullable(Of Short)
			Get
				Return Me._UnitsOnOrder
			End Get
			Set(ByVal value As System.Nullable(Of Short))
				If (Not Me._UnitsOnOrder.Equals(value)) Then
					Me.OnUnitsOnOrderChanging(value)
					Me.SendPropertyChanging()
					Me._UnitsOnOrder = value
					Me.SendPropertyChanged("UnitsOnOrder")
					Me.OnUnitsOnOrderChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReorderLevel", DbType:="SmallInt")> _
		Public Property ReorderLevel() As System.Nullable(Of Short)
			Get
				Return Me._ReorderLevel
			End Get
			Set(ByVal value As System.Nullable(Of Short))
				If (Not Me._ReorderLevel.Equals(value)) Then
					Me.OnReorderLevelChanging(value)
					Me.SendPropertyChanging()
					Me._ReorderLevel = value
					Me.SendPropertyChanged("ReorderLevel")
					Me.OnReorderLevelChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Discontinued", DbType:="Bit NOT NULL")> _
		Public Property Discontinued() As Boolean
			Get
				Return Me._Discontinued
			End Get
			Set(ByVal value As Boolean)
				If (Me._Discontinued <> value) Then
					Me.OnDiscontinuedChanging(value)
					Me.SendPropertyChanging()
					Me._Discontinued = value
					Me.SendPropertyChanged("Discontinued")
					Me.OnDiscontinuedChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisplayIndex", DbType:="Int")> _
		Public Property DisplayIndex() As System.Nullable(Of Integer)
			Get
				Return Me._DisplayIndex
			End Get
			Set(ByVal value As System.Nullable(Of Integer))
				If (Not Me._DisplayIndex.Equals(value)) Then
					Me.OnDisplayIndexChanging(value)
					Me.SendPropertyChanging()
					Me._DisplayIndex = value
					Me.SendPropertyChanged("DisplayIndex")
					Me.OnDisplayIndexChanged()
				End If
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			If (Me.PropertyChangingEvent IsNot Nothing) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			If (Me.PropertyChangedEvent IsNot Nothing) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
End Namespace
'TODO: INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning restore 1591
